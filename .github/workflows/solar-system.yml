name: Solar System Workflow

on:
  workflow_dispatch: 
  push:
    branches: 
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repositery
        uses: actions/checkout@v4
        
      - name: Setup nodejs version -18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Store/Use Caches NPM
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }} #rely on package-lock.json file conatin info about package/dependencies and change done to package.json this file will change
          #so whenever the file changes we want to invalidate the cache and create a new cache , so to do that we are using hashfilecfunction, give a hash for file which is used as a key here , whenevr file change hash change and it will skip the cache and invalidate the cache and create again

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: Node-Js-Id
        run: npm test

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MOCHA-TEST-RESULTS
          path: test-results.xml 

  code-coverage:
    name: Running Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repositery
        uses: actions/checkout@v4

      - name: Setup nodejs version -18
        uses: actions/setup-node@v4
        with:
          node-version: 18      
      
      - name: Store/Use Caches NPM
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: COVERAGE_RESULTS
          path: coverage
          retention-days: 5 

  Docker_Login:
    name: Containerization
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest 
    steps:

      - name: checkout repo
        uses: actions/checkout@v4

      - name: Login to docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: . #accept path where we have docker file here in root 
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system-latest

             #naming image and running in detached mode
             #expose on port 3000
             #passing env variable to connect to database
             #running the image container will start
             #

      - name: Test Docker Image
        run: |
          docker images
          docker run --name solar-system-app -d \ 
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ vars.DOCKERHUB_USERNAME }}/solar-system-latest

          expoer IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}' solar-syatem-app)
          echo $IP
          
          echo Testing image URL wsing wget
          wget -q -O - 127.0.0.1:3000/live | grep live
